" ----------------- dmyTRUEk's ideavim config -----------------

" Find more examples here: https://jb.gg/share-ideavimrc

set encoding=utf-8          " use utf-8 encoding

set number relativenumber   " set line numbers relative to caret
set cursorline              " highlight cursor line
set showmatch               " shows matching brackets
set laststatus=2            " it controls, when/how to display status-bar: 0=never, 1={if > than 2 windows}, 2=always
set autochdir               " change current dir to file's dir (folder directory)
"set showcmd                 " ? show last command (if you pressed 'j' then 'j' will be showed)
set virtualedit=block

" better search
set incsearch               " show search results immedeatly
set hlsearch                " highlight found
set ignorecase              " /word will find 'word' or 'Word' or 'WORD'
set smartcase               " when 'ignorecase' and 'smartcase' are both on, if a pattern contains an uppercase letter, it is case sensitive, otherwise, it is not; for example, '/The' would find only 'The', while '/the' would find both 'the' and 'The'

set autoindent              " set tabs automatically, when starting new line

set scrolloff=10



Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tommcdo/vim-exchange'
Plug 'unblevable/quick-scope'
Plug 'machakann/vim-highlightedyank'



let mapleader = " "



noremap 0 ^
noremap ^ 0

noremap ` '
noremap ' `

noremap <C-j> <C-d>zz
noremap <C-k> <C-u>zz
noremap <C-n> %

map Q <nop>
nnoremap U <C-r>
nnoremap Y y$
noremap - $
nnoremap <C-p> $p
nnoremap <A-p> ^P

nnoremap ch lc2h
nnoremap cl c2l
nnoremap dh ld2h
nnoremap dl d2l
nnoremap yh ly2h
nnoremap yl y2l

nnoremap cn ct(
nnoremap dn dt(
nnoremap yn yt(
nnoremap cu ct_
nnoremap du df_
nnoremap d_ df_

nnoremap c; ct;
nnoremap d; dt;
nnoremap y; yt;

nnoremap <leader>; m`A;<esc>``
nnoremap <leader>: m`A:<esc>``
nnoremap <leader>, m`A,<esc>``
nnoremap <leader>. m`A.<esc>``
nnoremap <leader>e m`$x``

nnoremap cc <nop>

nnoremap ccw yiwwviwp2bviwp
nnoremap ccW yiWWviWp2BviWp

nnoremap ccb yiwbviwpwviwp
nnoremap ccB yiWBviWpWviWp

nnoremap cc2w yiw2wviwp3bviwp
nnoremap cc2W yiW2WviWp3BviWp
nnoremap cc2b yiw2bviwp2wviwp
nnoremap cc2B yiW2BviWp2WviWp

nnoremap cc3w yiw3wviwp4bviwp
nnoremap cc3b yiw3bviwp3wviwp
nnoremap cc3W yiW3WviWp4BviWp
nnoremap cc3B yiW3BviWp3WviWp

nnoremap g/m /<<<<<<<\\|=======\\|>>>>>>> <cr>



nnoremap <leader>q :q <cr>
nnoremap <leader>Q :qa <cr>
nnoremap <leader>w :w <cr>
nnoremap <leader>W :wa <cr>
nnoremap <leader>a :wq <cr>
nnoremap <leader>A :wqa <cr>
" TODO: maybe adjust it for AS's tabs navigation?
nnoremap <leader>h :wincmd h <cr>
nnoremap <leader>j :wincmd j <cr>
nnoremap <leader>k :wincmd k <cr>
nnoremap <leader>l :wincmd l <cr>
nnoremap <leader>H :wincmd H <cr>
nnoremap <leader>J :wincmd J <cr>
nnoremap <leader>K :wincmd K <cr>
nnoremap <leader>L :wincmd L <cr>
nnoremap <leader><leader> :wincmd p <cr>

nnoremap <esc> :nohlsearch <cr>



" TODO: <C-;>
inoremap <C-;> <nop>
inoremap <C-h> <left>
inoremap <C-j> <down>
inoremap <C-k> <up>
inoremap <C-l> <right>



xnoremap S :sort <cr>





" vim-surround (yank(add,create), change, delete surround, like brackets, quotes):
" better map in visual mode:
let g:surround_no_mappings = 1 " bc of my 'xnoremap S'
nmap ds  <Plug>Dsurround
nmap cs  <Plug>Csurround
nmap cS  <Plug>CSurround
nmap ys  <Plug>Ysurround
nmap yS  <Plug>YSurround
nmap yss <Plug>Yssurround
nmap ySs <Plug>YSsurround
nmap ySS <Plug>YSsurround
xmap s   <Plug>VSurround
xmap Ñ–   <Plug>VSurround
" TODO: surround by spaces without double press space
"autocmd FileType * let g:surround_{char2nr(" ")} = " \r "
autocmd FileType * let g:surround_{char2nr("\<CR>")} = "\n\t\r\n"
autocmd FileType * let b:surround_{char2nr("<")} = "<\r>"
autocmd FileType * let b:surround_{char2nr("(")} = "(\r)"
autocmd FileType * let b:surround_{char2nr(")")} = "(\r)"
autocmd FileType * let b:surround_{char2nr("[")} = "[\r]"
autocmd FileType * let b:surround_{char2nr("]")} = "[\r]"
autocmd FileType * let b:surround_{char2nr("{")} = "{\r}"
autocmd FileType * let b:surround_{char2nr("}")} = "{\r}"
autocmd FileType markdown let b:surround_{char2nr("l")} = "[\r]()"
autocmd FileType markdown let b:surround_{char2nr("L")} = "[](\r)"



" vim-exchange (swap two text selections):
" better map in visual mode:
vnoremap x <Plug>(Exchange)
nnoremap X <Plug>(Exchange)



" quick-scope (highlight when pressing `f`):
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']





" Android Studio specific:

map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)
map <A-o> <Action>(Back)
map <A-i> <Action>(Forward)

map <C-H> <Action>(GotoPreviousError)
map <C-L> <Action>(GotoNextError)
map gd <Action>(GotoDeclaration)
"map gi <Action>(GotoImplementation)
map <leader>r <Action>(RenameElement)
map <leader>i <Action>(Inline)

map <leader>b <Action>(RebuildGradleProject)
map <leader>c <Action>(Run)
map <leader>d <Action>(ShowErrorDescription)

map <leader>f <Action>(GotoFile)
map <leader>g <Action>(FindInPath)
map <leader>n <Action>(Switcher)

map <leader>z <Action>(ToggleDistractionFreeMode)

" better next/prev suggestion
"imap <tab> <c-n>
"imap <s-tab> <c-p>
" it doesnt work TwT

